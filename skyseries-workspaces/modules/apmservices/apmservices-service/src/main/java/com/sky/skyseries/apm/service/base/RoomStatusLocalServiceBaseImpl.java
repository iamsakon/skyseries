/**
 * Copyright (c) 2000-present Liferay, Inc. All rights reserved.
 *
 * This library is free software; you can redistribute it and/or modify it under
 * the terms of the GNU Lesser General Public License as published by the Free
 * Software Foundation; either version 2.1 of the License, or (at your option)
 * any later version.
 *
 * This library is distributed in the hope that it will be useful, but WITHOUT
 * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS
 * FOR A PARTICULAR PURPOSE. See the GNU Lesser General Public License for more
 * details.
 */

package com.sky.skyseries.apm.service.base;

import aQute.bnd.annotation.ProviderType;

import com.liferay.exportimport.kernel.lar.ExportImportHelperUtil;
import com.liferay.exportimport.kernel.lar.ManifestSummary;
import com.liferay.exportimport.kernel.lar.PortletDataContext;
import com.liferay.exportimport.kernel.lar.StagedModelDataHandlerUtil;
import com.liferay.exportimport.kernel.lar.StagedModelType;

import com.liferay.portal.kernel.bean.BeanReference;
import com.liferay.portal.kernel.dao.db.DB;
import com.liferay.portal.kernel.dao.db.DBManagerUtil;
import com.liferay.portal.kernel.dao.jdbc.SqlUpdate;
import com.liferay.portal.kernel.dao.jdbc.SqlUpdateFactoryUtil;
import com.liferay.portal.kernel.dao.orm.ActionableDynamicQuery;
import com.liferay.portal.kernel.dao.orm.DefaultActionableDynamicQuery;
import com.liferay.portal.kernel.dao.orm.DynamicQuery;
import com.liferay.portal.kernel.dao.orm.DynamicQueryFactoryUtil;
import com.liferay.portal.kernel.dao.orm.ExportActionableDynamicQuery;
import com.liferay.portal.kernel.dao.orm.IndexableActionableDynamicQuery;
import com.liferay.portal.kernel.dao.orm.Projection;
import com.liferay.portal.kernel.exception.PortalException;
import com.liferay.portal.kernel.exception.SystemException;
import com.liferay.portal.kernel.model.PersistedModel;
import com.liferay.portal.kernel.module.framework.service.IdentifiableOSGiService;
import com.liferay.portal.kernel.search.Indexable;
import com.liferay.portal.kernel.search.IndexableType;
import com.liferay.portal.kernel.service.BaseLocalServiceImpl;
import com.liferay.portal.kernel.service.PersistedModelLocalServiceRegistry;
import com.liferay.portal.kernel.service.persistence.ClassNamePersistence;
import com.liferay.portal.kernel.service.persistence.UserPersistence;
import com.liferay.portal.kernel.util.OrderByComparator;
import com.liferay.portal.kernel.util.PortalUtil;
import com.liferay.portal.spring.extender.service.ServiceReference;

import com.sky.skyseries.apm.model.RoomStatus;
import com.sky.skyseries.apm.service.RoomStatusLocalService;
import com.sky.skyseries.apm.service.persistence.BuildingPersistence;
import com.sky.skyseries.apm.service.persistence.FloorPersistence;
import com.sky.skyseries.apm.service.persistence.LegalEntityPersistence;
import com.sky.skyseries.apm.service.persistence.RoomPersistence;
import com.sky.skyseries.apm.service.persistence.RoomStatusPersistence;
import com.sky.skyseries.apm.service.persistence.RoomTypePersistence;

import java.io.Serializable;

import java.util.List;

import javax.sql.DataSource;

/**
 * Provides the base implementation for the room status local service.
 *
 * <p>
 * This implementation exists only as a container for the default service methods generated by ServiceBuilder. All custom service methods should be put in {@link com.sky.skyseries.apm.service.impl.RoomStatusLocalServiceImpl}.
 * </p>
 *
 * @author Brian Wing Shun Chan
 * @see com.sky.skyseries.apm.service.impl.RoomStatusLocalServiceImpl
 * @see com.sky.skyseries.apm.service.RoomStatusLocalServiceUtil
 * @generated
 */
@ProviderType
public abstract class RoomStatusLocalServiceBaseImpl
	extends BaseLocalServiceImpl implements RoomStatusLocalService,
		IdentifiableOSGiService {
	/*
	 * NOTE FOR DEVELOPERS:
	 *
	 * Never modify or reference this class directly. Always use {@link com.sky.skyseries.apm.service.RoomStatusLocalServiceUtil} to access the room status local service.
	 */

	/**
	 * Adds the room status to the database. Also notifies the appropriate model listeners.
	 *
	 * @param roomStatus the room status
	 * @return the room status that was added
	 */
	@Indexable(type = IndexableType.REINDEX)
	@Override
	public RoomStatus addRoomStatus(RoomStatus roomStatus) {
		roomStatus.setNew(true);

		return roomStatusPersistence.update(roomStatus);
	}

	/**
	 * Creates a new room status with the primary key. Does not add the room status to the database.
	 *
	 * @param roomStatusId the primary key for the new room status
	 * @return the new room status
	 */
	@Override
	public RoomStatus createRoomStatus(long roomStatusId) {
		return roomStatusPersistence.create(roomStatusId);
	}

	/**
	 * Deletes the room status with the primary key from the database. Also notifies the appropriate model listeners.
	 *
	 * @param roomStatusId the primary key of the room status
	 * @return the room status that was removed
	 * @throws PortalException if a room status with the primary key could not be found
	 */
	@Indexable(type = IndexableType.DELETE)
	@Override
	public RoomStatus deleteRoomStatus(long roomStatusId)
		throws PortalException {
		return roomStatusPersistence.remove(roomStatusId);
	}

	/**
	 * Deletes the room status from the database. Also notifies the appropriate model listeners.
	 *
	 * @param roomStatus the room status
	 * @return the room status that was removed
	 */
	@Indexable(type = IndexableType.DELETE)
	@Override
	public RoomStatus deleteRoomStatus(RoomStatus roomStatus) {
		return roomStatusPersistence.remove(roomStatus);
	}

	@Override
	public DynamicQuery dynamicQuery() {
		Class<?> clazz = getClass();

		return DynamicQueryFactoryUtil.forClass(RoomStatus.class,
			clazz.getClassLoader());
	}

	/**
	 * Performs a dynamic query on the database and returns the matching rows.
	 *
	 * @param dynamicQuery the dynamic query
	 * @return the matching rows
	 */
	@Override
	public <T> List<T> dynamicQuery(DynamicQuery dynamicQuery) {
		return roomStatusPersistence.findWithDynamicQuery(dynamicQuery);
	}

	/**
	 * Performs a dynamic query on the database and returns a range of the matching rows.
	 *
	 * <p>
	 * Useful when paginating results. Returns a maximum of <code>end - start</code> instances. <code>start</code> and <code>end</code> are not primary keys, they are indexes in the result set. Thus, <code>0</code> refers to the first result in the set. Setting both <code>start</code> and <code>end</code> to {@link com.liferay.portal.kernel.dao.orm.QueryUtil#ALL_POS} will return the full result set. If <code>orderByComparator</code> is specified, then the query will include the given ORDER BY logic. If <code>orderByComparator</code> is absent and pagination is required (<code>start</code> and <code>end</code> are not {@link com.liferay.portal.kernel.dao.orm.QueryUtil#ALL_POS}), then the query will include the default ORDER BY logic from {@link com.sky.skyseries.apm.model.impl.RoomStatusModelImpl}. If both <code>orderByComparator</code> and pagination are absent, for performance reasons, the query will not have an ORDER BY clause and the returned result set will be sorted on by the primary key in an ascending order.
	 * </p>
	 *
	 * @param dynamicQuery the dynamic query
	 * @param start the lower bound of the range of model instances
	 * @param end the upper bound of the range of model instances (not inclusive)
	 * @return the range of matching rows
	 */
	@Override
	public <T> List<T> dynamicQuery(DynamicQuery dynamicQuery, int start,
		int end) {
		return roomStatusPersistence.findWithDynamicQuery(dynamicQuery, start,
			end);
	}

	/**
	 * Performs a dynamic query on the database and returns an ordered range of the matching rows.
	 *
	 * <p>
	 * Useful when paginating results. Returns a maximum of <code>end - start</code> instances. <code>start</code> and <code>end</code> are not primary keys, they are indexes in the result set. Thus, <code>0</code> refers to the first result in the set. Setting both <code>start</code> and <code>end</code> to {@link com.liferay.portal.kernel.dao.orm.QueryUtil#ALL_POS} will return the full result set. If <code>orderByComparator</code> is specified, then the query will include the given ORDER BY logic. If <code>orderByComparator</code> is absent and pagination is required (<code>start</code> and <code>end</code> are not {@link com.liferay.portal.kernel.dao.orm.QueryUtil#ALL_POS}), then the query will include the default ORDER BY logic from {@link com.sky.skyseries.apm.model.impl.RoomStatusModelImpl}. If both <code>orderByComparator</code> and pagination are absent, for performance reasons, the query will not have an ORDER BY clause and the returned result set will be sorted on by the primary key in an ascending order.
	 * </p>
	 *
	 * @param dynamicQuery the dynamic query
	 * @param start the lower bound of the range of model instances
	 * @param end the upper bound of the range of model instances (not inclusive)
	 * @param orderByComparator the comparator to order the results by (optionally <code>null</code>)
	 * @return the ordered range of matching rows
	 */
	@Override
	public <T> List<T> dynamicQuery(DynamicQuery dynamicQuery, int start,
		int end, OrderByComparator<T> orderByComparator) {
		return roomStatusPersistence.findWithDynamicQuery(dynamicQuery, start,
			end, orderByComparator);
	}

	/**
	 * Returns the number of rows matching the dynamic query.
	 *
	 * @param dynamicQuery the dynamic query
	 * @return the number of rows matching the dynamic query
	 */
	@Override
	public long dynamicQueryCount(DynamicQuery dynamicQuery) {
		return roomStatusPersistence.countWithDynamicQuery(dynamicQuery);
	}

	/**
	 * Returns the number of rows matching the dynamic query.
	 *
	 * @param dynamicQuery the dynamic query
	 * @param projection the projection to apply to the query
	 * @return the number of rows matching the dynamic query
	 */
	@Override
	public long dynamicQueryCount(DynamicQuery dynamicQuery,
		Projection projection) {
		return roomStatusPersistence.countWithDynamicQuery(dynamicQuery,
			projection);
	}

	@Override
	public RoomStatus fetchRoomStatus(long roomStatusId) {
		return roomStatusPersistence.fetchByPrimaryKey(roomStatusId);
	}

	/**
	 * Returns the room status matching the UUID and group.
	 *
	 * @param uuid the room status's UUID
	 * @param groupId the primary key of the group
	 * @return the matching room status, or <code>null</code> if a matching room status could not be found
	 */
	@Override
	public RoomStatus fetchRoomStatusByUuidAndGroupId(String uuid, long groupId) {
		return roomStatusPersistence.fetchByUUID_G(uuid, groupId);
	}

	/**
	 * Returns the room status with the primary key.
	 *
	 * @param roomStatusId the primary key of the room status
	 * @return the room status
	 * @throws PortalException if a room status with the primary key could not be found
	 */
	@Override
	public RoomStatus getRoomStatus(long roomStatusId)
		throws PortalException {
		return roomStatusPersistence.findByPrimaryKey(roomStatusId);
	}

	@Override
	public ActionableDynamicQuery getActionableDynamicQuery() {
		ActionableDynamicQuery actionableDynamicQuery = new DefaultActionableDynamicQuery();

		actionableDynamicQuery.setBaseLocalService(roomStatusLocalService);
		actionableDynamicQuery.setClassLoader(getClassLoader());
		actionableDynamicQuery.setModelClass(RoomStatus.class);

		actionableDynamicQuery.setPrimaryKeyPropertyName("roomStatusId");

		return actionableDynamicQuery;
	}

	@Override
	public IndexableActionableDynamicQuery getIndexableActionableDynamicQuery() {
		IndexableActionableDynamicQuery indexableActionableDynamicQuery = new IndexableActionableDynamicQuery();

		indexableActionableDynamicQuery.setBaseLocalService(roomStatusLocalService);
		indexableActionableDynamicQuery.setClassLoader(getClassLoader());
		indexableActionableDynamicQuery.setModelClass(RoomStatus.class);

		indexableActionableDynamicQuery.setPrimaryKeyPropertyName(
			"roomStatusId");

		return indexableActionableDynamicQuery;
	}

	protected void initActionableDynamicQuery(
		ActionableDynamicQuery actionableDynamicQuery) {
		actionableDynamicQuery.setBaseLocalService(roomStatusLocalService);
		actionableDynamicQuery.setClassLoader(getClassLoader());
		actionableDynamicQuery.setModelClass(RoomStatus.class);

		actionableDynamicQuery.setPrimaryKeyPropertyName("roomStatusId");
	}

	@Override
	public ExportActionableDynamicQuery getExportActionableDynamicQuery(
		final PortletDataContext portletDataContext) {
		final ExportActionableDynamicQuery exportActionableDynamicQuery = new ExportActionableDynamicQuery() {
				@Override
				public long performCount() throws PortalException {
					ManifestSummary manifestSummary = portletDataContext.getManifestSummary();

					StagedModelType stagedModelType = getStagedModelType();

					long modelAdditionCount = super.performCount();

					manifestSummary.addModelAdditionCount(stagedModelType,
						modelAdditionCount);

					long modelDeletionCount = ExportImportHelperUtil.getModelDeletionCount(portletDataContext,
							stagedModelType);

					manifestSummary.addModelDeletionCount(stagedModelType,
						modelDeletionCount);

					return modelAdditionCount;
				}
			};

		initActionableDynamicQuery(exportActionableDynamicQuery);

		exportActionableDynamicQuery.setAddCriteriaMethod(new ActionableDynamicQuery.AddCriteriaMethod() {
				@Override
				public void addCriteria(DynamicQuery dynamicQuery) {
					portletDataContext.addDateRangeCriteria(dynamicQuery,
						"modifiedDate");
				}
			});

		exportActionableDynamicQuery.setCompanyId(portletDataContext.getCompanyId());

		exportActionableDynamicQuery.setPerformActionMethod(new ActionableDynamicQuery.PerformActionMethod<RoomStatus>() {
				@Override
				public void performAction(RoomStatus roomStatus)
					throws PortalException {
					StagedModelDataHandlerUtil.exportStagedModel(portletDataContext,
						roomStatus);
				}
			});
		exportActionableDynamicQuery.setStagedModelType(new StagedModelType(
				PortalUtil.getClassNameId(RoomStatus.class.getName())));

		return exportActionableDynamicQuery;
	}

	/**
	 * @throws PortalException
	 */
	@Override
	public PersistedModel deletePersistedModel(PersistedModel persistedModel)
		throws PortalException {
		return roomStatusLocalService.deleteRoomStatus((RoomStatus)persistedModel);
	}

	@Override
	public PersistedModel getPersistedModel(Serializable primaryKeyObj)
		throws PortalException {
		return roomStatusPersistence.findByPrimaryKey(primaryKeyObj);
	}

	/**
	 * Returns all the room statuses matching the UUID and company.
	 *
	 * @param uuid the UUID of the room statuses
	 * @param companyId the primary key of the company
	 * @return the matching room statuses, or an empty list if no matches were found
	 */
	@Override
	public List<RoomStatus> getRoomStatusesByUuidAndCompanyId(String uuid,
		long companyId) {
		return roomStatusPersistence.findByUuid_C(uuid, companyId);
	}

	/**
	 * Returns a range of room statuses matching the UUID and company.
	 *
	 * @param uuid the UUID of the room statuses
	 * @param companyId the primary key of the company
	 * @param start the lower bound of the range of room statuses
	 * @param end the upper bound of the range of room statuses (not inclusive)
	 * @param orderByComparator the comparator to order the results by (optionally <code>null</code>)
	 * @return the range of matching room statuses, or an empty list if no matches were found
	 */
	@Override
	public List<RoomStatus> getRoomStatusesByUuidAndCompanyId(String uuid,
		long companyId, int start, int end,
		OrderByComparator<RoomStatus> orderByComparator) {
		return roomStatusPersistence.findByUuid_C(uuid, companyId, start, end,
			orderByComparator);
	}

	/**
	 * Returns the room status matching the UUID and group.
	 *
	 * @param uuid the room status's UUID
	 * @param groupId the primary key of the group
	 * @return the matching room status
	 * @throws PortalException if a matching room status could not be found
	 */
	@Override
	public RoomStatus getRoomStatusByUuidAndGroupId(String uuid, long groupId)
		throws PortalException {
		return roomStatusPersistence.findByUUID_G(uuid, groupId);
	}

	/**
	 * Returns a range of all the room statuses.
	 *
	 * <p>
	 * Useful when paginating results. Returns a maximum of <code>end - start</code> instances. <code>start</code> and <code>end</code> are not primary keys, they are indexes in the result set. Thus, <code>0</code> refers to the first result in the set. Setting both <code>start</code> and <code>end</code> to {@link com.liferay.portal.kernel.dao.orm.QueryUtil#ALL_POS} will return the full result set. If <code>orderByComparator</code> is specified, then the query will include the given ORDER BY logic. If <code>orderByComparator</code> is absent and pagination is required (<code>start</code> and <code>end</code> are not {@link com.liferay.portal.kernel.dao.orm.QueryUtil#ALL_POS}), then the query will include the default ORDER BY logic from {@link com.sky.skyseries.apm.model.impl.RoomStatusModelImpl}. If both <code>orderByComparator</code> and pagination are absent, for performance reasons, the query will not have an ORDER BY clause and the returned result set will be sorted on by the primary key in an ascending order.
	 * </p>
	 *
	 * @param start the lower bound of the range of room statuses
	 * @param end the upper bound of the range of room statuses (not inclusive)
	 * @return the range of room statuses
	 */
	@Override
	public List<RoomStatus> getRoomStatuses(int start, int end) {
		return roomStatusPersistence.findAll(start, end);
	}

	/**
	 * Returns the number of room statuses.
	 *
	 * @return the number of room statuses
	 */
	@Override
	public int getRoomStatusesCount() {
		return roomStatusPersistence.countAll();
	}

	/**
	 * Updates the room status in the database or adds it if it does not yet exist. Also notifies the appropriate model listeners.
	 *
	 * @param roomStatus the room status
	 * @return the room status that was updated
	 */
	@Indexable(type = IndexableType.REINDEX)
	@Override
	public RoomStatus updateRoomStatus(RoomStatus roomStatus) {
		return roomStatusPersistence.update(roomStatus);
	}

	/**
	 * Returns the building local service.
	 *
	 * @return the building local service
	 */
	public com.sky.skyseries.apm.service.BuildingLocalService getBuildingLocalService() {
		return buildingLocalService;
	}

	/**
	 * Sets the building local service.
	 *
	 * @param buildingLocalService the building local service
	 */
	public void setBuildingLocalService(
		com.sky.skyseries.apm.service.BuildingLocalService buildingLocalService) {
		this.buildingLocalService = buildingLocalService;
	}

	/**
	 * Returns the building persistence.
	 *
	 * @return the building persistence
	 */
	public BuildingPersistence getBuildingPersistence() {
		return buildingPersistence;
	}

	/**
	 * Sets the building persistence.
	 *
	 * @param buildingPersistence the building persistence
	 */
	public void setBuildingPersistence(BuildingPersistence buildingPersistence) {
		this.buildingPersistence = buildingPersistence;
	}

	/**
	 * Returns the floor local service.
	 *
	 * @return the floor local service
	 */
	public com.sky.skyseries.apm.service.FloorLocalService getFloorLocalService() {
		return floorLocalService;
	}

	/**
	 * Sets the floor local service.
	 *
	 * @param floorLocalService the floor local service
	 */
	public void setFloorLocalService(
		com.sky.skyseries.apm.service.FloorLocalService floorLocalService) {
		this.floorLocalService = floorLocalService;
	}

	/**
	 * Returns the floor persistence.
	 *
	 * @return the floor persistence
	 */
	public FloorPersistence getFloorPersistence() {
		return floorPersistence;
	}

	/**
	 * Sets the floor persistence.
	 *
	 * @param floorPersistence the floor persistence
	 */
	public void setFloorPersistence(FloorPersistence floorPersistence) {
		this.floorPersistence = floorPersistence;
	}

	/**
	 * Returns the legal entity local service.
	 *
	 * @return the legal entity local service
	 */
	public com.sky.skyseries.apm.service.LegalEntityLocalService getLegalEntityLocalService() {
		return legalEntityLocalService;
	}

	/**
	 * Sets the legal entity local service.
	 *
	 * @param legalEntityLocalService the legal entity local service
	 */
	public void setLegalEntityLocalService(
		com.sky.skyseries.apm.service.LegalEntityLocalService legalEntityLocalService) {
		this.legalEntityLocalService = legalEntityLocalService;
	}

	/**
	 * Returns the legal entity persistence.
	 *
	 * @return the legal entity persistence
	 */
	public LegalEntityPersistence getLegalEntityPersistence() {
		return legalEntityPersistence;
	}

	/**
	 * Sets the legal entity persistence.
	 *
	 * @param legalEntityPersistence the legal entity persistence
	 */
	public void setLegalEntityPersistence(
		LegalEntityPersistence legalEntityPersistence) {
		this.legalEntityPersistence = legalEntityPersistence;
	}

	/**
	 * Returns the room local service.
	 *
	 * @return the room local service
	 */
	public com.sky.skyseries.apm.service.RoomLocalService getRoomLocalService() {
		return roomLocalService;
	}

	/**
	 * Sets the room local service.
	 *
	 * @param roomLocalService the room local service
	 */
	public void setRoomLocalService(
		com.sky.skyseries.apm.service.RoomLocalService roomLocalService) {
		this.roomLocalService = roomLocalService;
	}

	/**
	 * Returns the room persistence.
	 *
	 * @return the room persistence
	 */
	public RoomPersistence getRoomPersistence() {
		return roomPersistence;
	}

	/**
	 * Sets the room persistence.
	 *
	 * @param roomPersistence the room persistence
	 */
	public void setRoomPersistence(RoomPersistence roomPersistence) {
		this.roomPersistence = roomPersistence;
	}

	/**
	 * Returns the room rate local service.
	 *
	 * @return the room rate local service
	 */
	public com.sky.skyseries.apm.service.RoomRateLocalService getRoomRateLocalService() {
		return roomRateLocalService;
	}

	/**
	 * Sets the room rate local service.
	 *
	 * @param roomRateLocalService the room rate local service
	 */
	public void setRoomRateLocalService(
		com.sky.skyseries.apm.service.RoomRateLocalService roomRateLocalService) {
		this.roomRateLocalService = roomRateLocalService;
	}

	/**
	 * Returns the room status local service.
	 *
	 * @return the room status local service
	 */
	public RoomStatusLocalService getRoomStatusLocalService() {
		return roomStatusLocalService;
	}

	/**
	 * Sets the room status local service.
	 *
	 * @param roomStatusLocalService the room status local service
	 */
	public void setRoomStatusLocalService(
		RoomStatusLocalService roomStatusLocalService) {
		this.roomStatusLocalService = roomStatusLocalService;
	}

	/**
	 * Returns the room status persistence.
	 *
	 * @return the room status persistence
	 */
	public RoomStatusPersistence getRoomStatusPersistence() {
		return roomStatusPersistence;
	}

	/**
	 * Sets the room status persistence.
	 *
	 * @param roomStatusPersistence the room status persistence
	 */
	public void setRoomStatusPersistence(
		RoomStatusPersistence roomStatusPersistence) {
		this.roomStatusPersistence = roomStatusPersistence;
	}

	/**
	 * Returns the room type local service.
	 *
	 * @return the room type local service
	 */
	public com.sky.skyseries.apm.service.RoomTypeLocalService getRoomTypeLocalService() {
		return roomTypeLocalService;
	}

	/**
	 * Sets the room type local service.
	 *
	 * @param roomTypeLocalService the room type local service
	 */
	public void setRoomTypeLocalService(
		com.sky.skyseries.apm.service.RoomTypeLocalService roomTypeLocalService) {
		this.roomTypeLocalService = roomTypeLocalService;
	}

	/**
	 * Returns the room type persistence.
	 *
	 * @return the room type persistence
	 */
	public RoomTypePersistence getRoomTypePersistence() {
		return roomTypePersistence;
	}

	/**
	 * Sets the room type persistence.
	 *
	 * @param roomTypePersistence the room type persistence
	 */
	public void setRoomTypePersistence(RoomTypePersistence roomTypePersistence) {
		this.roomTypePersistence = roomTypePersistence;
	}

	/**
	 * Returns the counter local service.
	 *
	 * @return the counter local service
	 */
	public com.liferay.counter.kernel.service.CounterLocalService getCounterLocalService() {
		return counterLocalService;
	}

	/**
	 * Sets the counter local service.
	 *
	 * @param counterLocalService the counter local service
	 */
	public void setCounterLocalService(
		com.liferay.counter.kernel.service.CounterLocalService counterLocalService) {
		this.counterLocalService = counterLocalService;
	}

	/**
	 * Returns the class name local service.
	 *
	 * @return the class name local service
	 */
	public com.liferay.portal.kernel.service.ClassNameLocalService getClassNameLocalService() {
		return classNameLocalService;
	}

	/**
	 * Sets the class name local service.
	 *
	 * @param classNameLocalService the class name local service
	 */
	public void setClassNameLocalService(
		com.liferay.portal.kernel.service.ClassNameLocalService classNameLocalService) {
		this.classNameLocalService = classNameLocalService;
	}

	/**
	 * Returns the class name persistence.
	 *
	 * @return the class name persistence
	 */
	public ClassNamePersistence getClassNamePersistence() {
		return classNamePersistence;
	}

	/**
	 * Sets the class name persistence.
	 *
	 * @param classNamePersistence the class name persistence
	 */
	public void setClassNamePersistence(
		ClassNamePersistence classNamePersistence) {
		this.classNamePersistence = classNamePersistence;
	}

	/**
	 * Returns the resource local service.
	 *
	 * @return the resource local service
	 */
	public com.liferay.portal.kernel.service.ResourceLocalService getResourceLocalService() {
		return resourceLocalService;
	}

	/**
	 * Sets the resource local service.
	 *
	 * @param resourceLocalService the resource local service
	 */
	public void setResourceLocalService(
		com.liferay.portal.kernel.service.ResourceLocalService resourceLocalService) {
		this.resourceLocalService = resourceLocalService;
	}

	/**
	 * Returns the user local service.
	 *
	 * @return the user local service
	 */
	public com.liferay.portal.kernel.service.UserLocalService getUserLocalService() {
		return userLocalService;
	}

	/**
	 * Sets the user local service.
	 *
	 * @param userLocalService the user local service
	 */
	public void setUserLocalService(
		com.liferay.portal.kernel.service.UserLocalService userLocalService) {
		this.userLocalService = userLocalService;
	}

	/**
	 * Returns the user persistence.
	 *
	 * @return the user persistence
	 */
	public UserPersistence getUserPersistence() {
		return userPersistence;
	}

	/**
	 * Sets the user persistence.
	 *
	 * @param userPersistence the user persistence
	 */
	public void setUserPersistence(UserPersistence userPersistence) {
		this.userPersistence = userPersistence;
	}

	public void afterPropertiesSet() {
		persistedModelLocalServiceRegistry.register("com.sky.skyseries.apm.model.RoomStatus",
			roomStatusLocalService);
	}

	public void destroy() {
		persistedModelLocalServiceRegistry.unregister(
			"com.sky.skyseries.apm.model.RoomStatus");
	}

	/**
	 * Returns the OSGi service identifier.
	 *
	 * @return the OSGi service identifier
	 */
	@Override
	public String getOSGiServiceIdentifier() {
		return RoomStatusLocalService.class.getName();
	}

	protected Class<?> getModelClass() {
		return RoomStatus.class;
	}

	protected String getModelClassName() {
		return RoomStatus.class.getName();
	}

	/**
	 * Performs a SQL query.
	 *
	 * @param sql the sql query
	 */
	protected void runSQL(String sql) {
		try {
			DataSource dataSource = roomStatusPersistence.getDataSource();

			DB db = DBManagerUtil.getDB();

			sql = db.buildSQL(sql);
			sql = PortalUtil.transformSQL(sql);

			SqlUpdate sqlUpdate = SqlUpdateFactoryUtil.getSqlUpdate(dataSource,
					sql);

			sqlUpdate.update();
		}
		catch (Exception e) {
			throw new SystemException(e);
		}
	}

	@BeanReference(type = com.sky.skyseries.apm.service.BuildingLocalService.class)
	protected com.sky.skyseries.apm.service.BuildingLocalService buildingLocalService;
	@BeanReference(type = BuildingPersistence.class)
	protected BuildingPersistence buildingPersistence;
	@BeanReference(type = com.sky.skyseries.apm.service.FloorLocalService.class)
	protected com.sky.skyseries.apm.service.FloorLocalService floorLocalService;
	@BeanReference(type = FloorPersistence.class)
	protected FloorPersistence floorPersistence;
	@BeanReference(type = com.sky.skyseries.apm.service.LegalEntityLocalService.class)
	protected com.sky.skyseries.apm.service.LegalEntityLocalService legalEntityLocalService;
	@BeanReference(type = LegalEntityPersistence.class)
	protected LegalEntityPersistence legalEntityPersistence;
	@BeanReference(type = com.sky.skyseries.apm.service.RoomLocalService.class)
	protected com.sky.skyseries.apm.service.RoomLocalService roomLocalService;
	@BeanReference(type = RoomPersistence.class)
	protected RoomPersistence roomPersistence;
	@BeanReference(type = com.sky.skyseries.apm.service.RoomRateLocalService.class)
	protected com.sky.skyseries.apm.service.RoomRateLocalService roomRateLocalService;
	@BeanReference(type = RoomStatusLocalService.class)
	protected RoomStatusLocalService roomStatusLocalService;
	@BeanReference(type = RoomStatusPersistence.class)
	protected RoomStatusPersistence roomStatusPersistence;
	@BeanReference(type = com.sky.skyseries.apm.service.RoomTypeLocalService.class)
	protected com.sky.skyseries.apm.service.RoomTypeLocalService roomTypeLocalService;
	@BeanReference(type = RoomTypePersistence.class)
	protected RoomTypePersistence roomTypePersistence;
	@ServiceReference(type = com.liferay.counter.kernel.service.CounterLocalService.class)
	protected com.liferay.counter.kernel.service.CounterLocalService counterLocalService;
	@ServiceReference(type = com.liferay.portal.kernel.service.ClassNameLocalService.class)
	protected com.liferay.portal.kernel.service.ClassNameLocalService classNameLocalService;
	@ServiceReference(type = ClassNamePersistence.class)
	protected ClassNamePersistence classNamePersistence;
	@ServiceReference(type = com.liferay.portal.kernel.service.ResourceLocalService.class)
	protected com.liferay.portal.kernel.service.ResourceLocalService resourceLocalService;
	@ServiceReference(type = com.liferay.portal.kernel.service.UserLocalService.class)
	protected com.liferay.portal.kernel.service.UserLocalService userLocalService;
	@ServiceReference(type = UserPersistence.class)
	protected UserPersistence userPersistence;
	@ServiceReference(type = PersistedModelLocalServiceRegistry.class)
	protected PersistedModelLocalServiceRegistry persistedModelLocalServiceRegistry;
}